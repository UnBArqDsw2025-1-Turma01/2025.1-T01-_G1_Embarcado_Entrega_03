{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#projeto-cuideme","title":"\ud83d\udc75\ud83e\uddd3 Projeto CuideMe","text":"<p>\ud83d\udcd8 Este reposit\u00f3rio documenta todos os artefatos produzidos pelo Grupo 01 da disciplina ARQUITETURA E DESENHO DE SOFTWARE (FGA0208), oferecida pela Faculdade do Gama (FGA/UnB) no 1\u00ba semestre de 2025. Sendo documentado a 2\u00ba Entrega.</p>"},{"location":"#integrantes-do-grupo","title":"\ud83d\udc65 Integrantes do Grupo","text":"Altino Arthur Rocha Moreira Matr\u00edcula: 211030658 Daniel dos Santos Barros de Sousa Matr\u00edcula: 211030980 M\u00e1rcio Henrique Matr\u00edcula: 221039497 Matheus Henrick Dutra dos Santos Matr\u00edcula: 190018101 Weslley Barros Matr\u00edcula: 200044567 Lara Giuliana Lima dos Santos Matr\u00edcula: 190058048"},{"location":"#sobre","title":"Sobre","text":"<p>O projeto tem como objetivo desenvolver um Sistema de monitoramento de quedas para pessoas idosas ou para pessoas com mobilidade reduzida, sendo composto por:</p> <ul> <li>\ud83d\udc55 Um wearable com sensores IMU (ex: BNO086) para detectar quedas;</li> <li>\ud83d\udcf1 Uma aplica\u00e7\u00e3o (app/web) para cuidadores acompanharem o status da pessoa monitorada e receberem notifica\u00e7\u00f5es em tempo real.</li> </ul> <p>O que torna esse projeto de fato via;vel e essencial de ser implemetado, \u00e9 que de acordo com o Minist\u00e9rio da Sa\u00fade, cerca de 40% dos idosos com 80 anos ou mais sofrem quedas todos os anos (BRASIL, 2022) [1]. Isso por que quedas durante a velhice s\u00e3o comuns e podem vim atraladas a difer\u00e7os fatores, ent\u00e3o ter um meio r\u00e1pido de indentifica\u00e7\u00e3o de quedas, ajudara no r\u00e1pido amparo dessas pessoas idosas.</p>"},{"location":"#referencias","title":"Refer\u00eancias","text":"<p>[1] BRASIL. Minist\u00e9rio da Sa\u00fade. Todos os anos, 40% dos idosos com 80 anos ou mais sofrem quedas. 10 out. 2022. Acesso em: 11 abr. 2025.</p>"},{"location":"#historico-de-versoes","title":"Hist\u00f3rico de vers\u00f5es:","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor(es) Revisor(es) Descri\u00e7\u00e3o da Revis\u00e3o <code>1.0</code> 09/05/2025 Cria\u00e7\u00e3o da git page M\u00e1rcio Henrique Daniel Sousa Verifica\u00e7\u00e3o da integriade de conte\u00fado da gitpage"},{"location":"PadroesDeProjeto/3.1.GoFsCriacionais/","title":"3.1. M\u00f3dulo Padr\u00f5es de Projeto GoFs Criacionais","text":""},{"location":"PadroesDeProjeto/3.1.GoFsCriacionais/#padroes-criacionais-e-a-responsabilidade-de-instanciacao","title":"Padr\u00f5es Criacionais e a Responsabilidade de Instancia\u00e7\u00e3o","text":"<p>Ao modelar um diagrama de classes, um dos desafios mais relevantes est\u00e1 em definir quem \u00e9 respons\u00e1vel por instanciar os objetos e, em alguns casos, transferir essa responsabilidade de forma eficiente. Para isso, os padr\u00f5es criacionais do Gang of Four (GoF) oferecem solu\u00e7\u00f5es reutiliz\u00e1veis que favorecem um design mais flex\u00edvel, desacoplado e de melhor desempenho. A seguir, apresentamos os principais padr\u00f5es criacionais:</p> <ol> <li> <p>Factory Method: Permite que subclasses decidam qual classe instanciar, delegando a responsabilidade de cria\u00e7\u00e3o. Isso evita acoplamentos diretos e melhora a escalabilidade do sistema.</p> </li> <li> <p>Abstract Factory: Foca na cria\u00e7\u00e3o de fam\u00edlias de objetos relacionados, promovendo consist\u00eancia em estruturas com hierarquias complexas. Ideal para sistemas com m\u00faltiplas varia\u00e7\u00f5es de objetos interdependentes.</p> </li> <li> <p>Builder: Separa a constru\u00e7\u00e3o de um objeto da sua representa\u00e7\u00e3o final. \u00datil para criar objetos complexos com diferentes combina\u00e7\u00f5es de atributos, mantendo a clareza e reutiliza\u00e7\u00e3o do c\u00f3digo.</p> </li> <li> <p>Prototype: Cria novos objetos a partir da clonagem de um objeto existente. Ajuda a melhorar o desempenho em cen\u00e1rios onde a cria\u00e7\u00e3o do zero \u00e9 custosa, como em jogos ou simula\u00e7\u00f5es.</p> </li> <li> <p>Singleton: Garante que apenas uma inst\u00e2ncia de uma classe exista, fornecendo um ponto de acesso global. Aplicado em contextos como configura\u00e7\u00f5es globais e gerenciadores de recursos.</p> </li> <li> <p>Multiton: Variante do Singleton que permite m\u00faltiplas inst\u00e2ncias \u00fanicas, identificadas por chaves espec\u00edficas. Indicado para sistemas que exigem um n\u00famero controlado de inst\u00e2ncias distintas.</p> </li> <li> <p>Object Pool: Gerencia um conjunto de objetos reutiliz\u00e1veis, evitando o custo de cria\u00e7\u00e3o e destrui\u00e7\u00e3o cont\u00ednua. Muito aplicado em jogos e sistemas que exigem alta performance com muitos objetos tempor\u00e1rios.</p> </li> </ol> <p>Esses padr\u00f5es s\u00e3o fundamentais para lidar com a complexidade da cria\u00e7\u00e3o de objetos em sistemas orientados a objetos, tornando o software mais f\u00e1cil de manter, evoluir e otimizar ao longo do tempo.</p>"},{"location":"PadroesDeProjeto/3.1.GoFsCriacionais/#aplicacao-no-projeto","title":"Aplica\u00e7\u00e3o no Projeto","text":"<p>Para a utiliza\u00e7\u00e3o do padr\u00e3o Singleton, foi inicialmente considerada a possibilidade de instanciar m\u00faltiplos objetos da classe RegistradorLog, como nos servi\u00e7os de monitoramento e an\u00e1lise de quedas. No entanto, essa abordagem foi descartada, pois poderia resultar em registros inconsistentes, duplicados ou at\u00e9 mesmo em conflitos de concorr\u00eancia durante o processo de log.</p> <p>Com o Singleton, todos os eventos, sejam quedas detectadas, notifica\u00e7\u00f5es enviadas ou erros internos seriam registrados por meio de uma \u00fanica inst\u00e2ncia. Isso evitaria duplica\u00e7\u00f5es de log, inconsist\u00eancias e problemas de concorr\u00eancia que poderiam surgir caso diferentes partes do sistema tentassem gerenciar seus pr\u00f3prios registros de forma independente. Assim, qualquer componente do sistema que precisasse registrar um evento acessaria a inst\u00e2ncia \u00fanica de RegistradorLog por meio do m\u00e9todo est\u00e1tico getInstance(), garantindo a coes\u00e3o do registro de eventos no sistema.</p> <p></p> <p></p>  Autores: Altino Arthur, M\u00e1rcio Henrique e Daniel de Sousa  <p></p>"},{"location":"PadroesDeProjeto/3.1.GoFsCriacionais/#implementacao-em-codigo-singleton","title":"Implementa\u00e7\u00e3o em c\u00f3digo - Singleton","text":"<pre><code>\npublic class RegistradorLog implements ListenerQueda {\n    private static RegistradorLog instance;\n\n    private RegistradorLog() {\n        // Construtor privado para implementar o Singleton\n        System.out.println(\"[RegistradorLog] Inst\u00e2ncia do RegistradorLog criada.\");\n    }\n\n    public static RegistradorLog getInstance() {\n        if (instance == null) {\n            instance = new RegistradorLog();\n        }\n        return instance;\n    }\n\n    @Override\n    public void onQuedaDetectada(Monitoramento m, ResultadoAnalise r) {\n        System.out.println(\"[RegistradorLog] Queda detectada e registrada no log. \" + m.getResumo() + \" - Risco: \" + r.getRiscoQueda());\n    }\n}\n\n</code></pre>  Autores: Altino Arthur, M\u00e1rcio Henrique e Daniel de Sousa"},{"location":"PadroesDeProjeto/3.1.GoFsCriacionais/#testando-o-singleton-do-registradorlog","title":"Testando o Singleton do RegistradorLog","text":"<pre><code>import observer.*;\npublic class SistemaMonitoramentoTest {\n\n    public static void main(String[] args) {\n        System.out.println(\"--- Testando o Singleton do RegistradorLog ---\");\n\n        // Primeira tentativa de obter a inst\u00e2ncia\n        System.out.println(\"\\nChamando RegistradorLog.getInstance() pela primeira vez...\");\n        RegistradorLog log1 = RegistradorLog.getInstance();\n        System.out.println(\"log1 obtido: \" + log1); // Isso vai imprimir o endere\u00e7o de mem\u00f3ria do objeto\n\n        // Segunda tentativa de obter a inst\u00e2ncia\n        System.out.println(\"\\nChamando RegistradorLog.getInstance() pela segunda vez...\");\n        RegistradorLog log2 = RegistradorLog.getInstance();\n        System.out.println(\"log2 obtido: \" + log2); // Deve imprimir o MESMO endere\u00e7o de mem\u00f3ria do log1\n\n        // Terceira tentativa de obter a inst\u00e2ncia\n        System.out.println(\"\\nChamando RegistradorLog.getInstance() pela terceira vez...\");\n        RegistradorLog log3 = RegistradorLog.getInstance();\n        System.out.println(\"log3 obtido: \" + log3); // Tamb\u00e9m deve imprimir o MESMO endere\u00e7o de mem\u00f3ria\n\n        System.out.println(\"\\n--- Verificando se as inst\u00e2ncias s\u00e3o as mesmas ---\");\n\n        // Compara as refer\u00eancias para confirmar que s\u00e3o o mesmo objeto\n        boolean saoIguais1_2 = (log1 == log2);\n        boolean saoIguais2_3 = (log2 == log3);\n        boolean saoIguais1_3 = (log1 == log3);\n\n        System.out.println(\"log1 \u00e9 o mesmo objeto que log2? \" + saoIguais1_2);\n        System.out.println(\"log2 \u00e9 o mesmo objeto que log3? \" + saoIguais2_3);\n        System.out.println(\"log1 \u00e9 o mesmo objeto que log3? \" + saoIguais1_3);\n        System.out.println(\"\\n--- Teste de Singleton Conclu\u00eddo ---\");\n    }\n}\n</code></pre>  Autores: Altino Arthur, M\u00e1rcio Henrique e Daniel de Sousa"},{"location":"PadroesDeProjeto/3.1.GoFsCriacionais/#resultados-dos-testes-singleton-do-registradorlog","title":"Resultados dos Testes Singleton do RegistradorLog","text":"Autores: Altino Arthur, M\u00e1rcio Henrique e Daniel de Sousa  <p>Para a utiliza\u00e7\u00e3o do padr\u00e3o Factory Method, foi inicialmente considerada a possibilidade de instanciar diretamente objetos da classe Notificacao (ou suas subclasses concretas, como NotificacaoSMS, NotificacaoEmail, etc.) em diversos pontos do sistema. No entanto, essa abordagem foi descartada, pois implicaria em um acoplamento forte entre o c\u00f3digo cliente (que solicita a notifica\u00e7\u00e3o) e as classes concretas de Notificacao. Isso tornaria o sistema r\u00edgido a mudan\u00e7as, dificultando a introdu\u00e7\u00e3o de novos tipos de notifica\u00e7\u00e3o ou a modifica\u00e7\u00e3o dos existentes, pois cada altera\u00e7\u00e3o exigiria modifica\u00e7\u00f5es em m\u00faltiplos locais do c\u00f3digo.</p> <p>Com o Factory Method, a cria\u00e7\u00e3o de objetos Notificacao \u00e9 centralizada e delegada \u00e0 NotificacaoFactory e suas subclasses concretas, como a ConcreteFactory. Isso permite que o sistema crie diferentes tipos de notifica\u00e7\u00f5es (por exemplo, NotificacaoSMS, NotificacaoEmail, NotificacaoApp) sem que o c\u00f3digo cliente precise saber qual classe concreta est\u00e1 sendo instanciada. A ConcreteFactory encapsula a l\u00f3gica de cria\u00e7\u00e3o, decidindo qual tipo de Notificacao ser\u00e1 produzido com base nos par\u00e2metros fornecidos (tipo, prioridade, destinat\u00e1rio). Assim, qualquer componente do sistema que precise enviar uma notifica\u00e7\u00e3o simplesmente \"chama\" o m\u00e9todo criarNotificacao() da f\u00e1brica.</p> <p></p> <p></p>  Autores: Altino Arthur, M\u00e1rcio Henrique e Daniel de Sousa  <p></p>"},{"location":"PadroesDeProjeto/3.1.GoFsCriacionais/#implementacao-em-codigo-factory-method","title":"Implementa\u00e7\u00e3o em c\u00f3digo - Factory Method","text":"<pre><code>\npackage factory;\n\nimport enums.Prioridade;\nimport enums.TipoAlerta;\nimport model.Notificacao;\nimport model.PessoaCuidador;\n\npublic abstract class NotificacaoFactory {\n    public abstract Notificacao criarNotificacao(TipoAlerta tipo, Prioridade prioridade, PessoaCuidador destinatario);\n}\n\npackage factory;\n\nimport enums.Prioridade;\nimport enums.TipoAlerta;\nimport model.Notificacao;\nimport model.PessoaCuidador;\nimport strategy.Email;\nimport strategy.IEnvio;\nimport strategy.Push;\nimport strategy.SMS;\n\npublic class ConcreteFactory extends NotificacaoFactory {\n\n    @Override\n    public Notificacao criarNotificacao(TipoAlerta tipo, Prioridade prioridade, PessoaCuidador destinatario) {\n        IEnvio estrategia;\n\n        switch (prioridade) {\n            case ALTA:\n                estrategia = new SMS();\n                break;\n            case MEDIA:\n                estrategia = new Email();\n                break;\n            case BAIXA:\n                estrategia = new Push();\n                break;\n            default:\n                throw new IllegalArgumentException(\"Prioridade inv\u00e1lida\");\n        }\n\n        return new Notificacao(tipo, prioridade, estrategia, destinatario);\n    }\n}\n\n\n</code></pre> <p>A implementa\u00e7\u00e3o da Factory Concreta n\u00e3o foi aplicado o padr\u00e3o Composite, ser\u00e1 assim mostrado na se\u00e7\u00e3o de sua devida implementa\u00e7\u00e3o. Acesse aqui</p>"},{"location":"PadroesDeProjeto/3.1.GoFsCriacionais/#implementacoes-das-classes","title":"Implementa\u00e7\u00f5es das Classes","text":"<p>As implementa\u00e7\u00f5es completas das classes mencionadas neste documento podem ser conferidas no reposit\u00f3rio oficial do projeto, dispon\u00edvel em:</p> <p>https://github.com/UnBArqDsw2025-1-Turma01/2025.1-T01-_G1_Embarcado_Entrega_03/tree/main/src/monitora</p> <p>O diret\u00f3rio <code>src/monitora</code> cont\u00e9m o c\u00f3digo-fonte Java estruturado em pacotes.</p>"},{"location":"PadroesDeProjeto/3.1.GoFsCriacionais/#referencias","title":"Refer\u00eancias","text":"<p>REFACTORING GURU. Padr\u00f5es de projeto criacionais. Dispon\u00edvel em: https://refactoring.guru/pt-br/design-patterns/creational-patterns. Acesso em: 30 de maio de 2025.</p>"},{"location":"PadroesDeProjeto/3.1.GoFsCriacionais/#historico-de-versoes","title":"Hist\u00f3rico de Vers\u00f5es","text":"Vers\u00e3o Commit da Vers\u00e3o Data Descri\u00e7\u00e3o Autor(es) Revisor(es) Descri\u00e7\u00e3o da Revis\u00e3o Commit da Revis\u00e3o 1.0 Ver Commit 01/06/2025 Adi\u00e7\u00e3o do diagrama Altino Arthur, M\u00e1rcio Henrique e Daniel de Sousa Revisor \u2014 \u2014 1.1 Ver Commit 01/06/2025 Adi\u00e7\u00e3o do diagrama factory method Altino Arthur, M\u00e1rcio Henrique e Daniel de Sousa Revisor \u2014 \u2014 1.2 Ver Commit 01/06/2025 Adi\u00e7\u00e3o do diagrama Singleton Altino Arthur, M\u00e1rcio Henrique e Daniel de Sousa Revisor \u2014 \u2014 1.3 Ver Commit 01/06/2025 Adi\u00e7\u00e3o da Implementa\u00e7\u00e3o Singleton Altino Arthur, M\u00e1rcio Henrique e Daniel de Sousa Revisor \u2014 \u2014 1.4 Ver Commit 01/06/2025 Adi\u00e7\u00e3o da Implementa\u00e7\u00e3o Factory Altino Arthur, M\u00e1rcio Henrique e Daniel de Sousa Revisor \u2014 \u2014"},{"location":"PadroesDeProjeto/3.2.GoFsEstruturais/","title":"3.2. M\u00f3dulo Padr\u00f5es de Projeto GoFs Estruturais","text":""},{"location":"PadroesDeProjeto/3.2.GoFsEstruturais/#padroes-estruturais","title":"Padr\u00f5es Estruturais","text":"<p>Ao modelar um sistema orientado a objetos, especialmente com m\u00faltiplas classes interconectadas, um dos principais desafios est\u00e1 em organizar e estruturar as rela\u00e7\u00f5es entre objetos e classes, de forma que o sistema permane\u00e7a flex\u00edvel, reutiliz\u00e1vel e de f\u00e1cil manuten\u00e7\u00e3o. Dentre eles:</p> <ol> <li> <p>Composite: O padr\u00e3o Composite tem como principal objetivo permitir que objetos sejam organizados em estruturas hier\u00e1rquicas de \u00e1rvore, onde objetos individuais e composi\u00e7\u00f5es desses objetos s\u00e3o tratados de maneira uniforme.</p> </li> <li> <p>Adapter:  Em sistemas que precisam integrar bibliotecas externas ou componentes legados, sem comprometer a arquitetura interna. O Adapter converte a interface de uma classe existente para uma interface esperada pelo cliente, promovendo reuso, desacoplamento e isolamento de depend\u00eancias externas.</p> </li> </ol> <p>Inicialmente, considerou-se a inclus\u00e3o de estruturas condicionais dentro da classe Notificacao, que verificariam o tipo de alerta e executariam manualmente o envio por cada canal necess\u00e1rio. No entanto, essa abordagem resultaria em um alto acoplamento da classe Notificacao \u00e0s implementa\u00e7\u00f5es espec\u00edficas de envio, dificultando sua manuten\u00e7\u00e3o e evolu\u00e7\u00e3o \u2014 especialmente no caso da adi\u00e7\u00e3o de novos canais no futuro.</p> <p>Para solucionar esse problema, optou-se pela aplica\u00e7\u00e3o do padr\u00e3o de projeto Composite, por meio da implementa\u00e7\u00e3o da classe EnvioComposto. Essa classe implementa a interface IEnvio, assim como as implementa\u00e7\u00f5es concretas EnvioEmail, EnvioSMS e EnvioPush. A diferen\u00e7a \u00e9 que EnvioComposto agrega m\u00faltiplas estrat\u00e9gias de envio em uma estrutura unificada, permitindo que diversas notifica\u00e7\u00f5es sejam enviadas simultaneamente, de forma transparente para o sistema.</p> <p></p> <p></p>  Autores: Altino Arthur, M\u00e1rcio Henrique e Daniel de Sousa  <p></p>"},{"location":"PadroesDeProjeto/3.2.GoFsEstruturais/#implementacao-em-codigo-composite","title":"Implementa\u00e7\u00e3o em c\u00f3digo - Composite","text":"<pre><code>\npublic interface IEnvio {\n    void enviar(Notificacao notificacao);\n}\n\npublic class EnvioEmail implements IEnvio {\n    @Override\n    public void enviar(Notificacao notificacao) {\n        System.out.println(\"Enviando Email para: \" + notificacao.getDestinatario().getNome());\n    }\n}\n\npublic class EnvioSMS implements IEnvio {\n    @Override\n    public void enviar(Notificacao notificacao) {\n        System.out.println(\"Enviando SMS para: \" + notificacao.getDestinatario().getNome());\n    }\n}\n\npublic class EnvioPush implements IEnvio {\n    @Override\n    public void enviar(Notificacao notificacao) {\n        System.out.println(\"Enviando Push para: \" + notificacao.getDestinatario().getNome());\n    }\n}\n\n\n\npublic class EnvioComposite implements IEnvio {\n    private List&lt;IEnvio&gt; canais = new ArrayList&lt;&gt;();\n\n    public void adicionarCanal(IEnvio canal) {\n        canais.add(canal);\n    }\n\n    @Override\n    public void enviar(Notificacao notificacao) {\n        for (IEnvio canal : canais) {\n            canal.enviar(notificacao);\n        }\n    }\n}\n\n\n</code></pre> <p>No decorrer das discuss\u00f5es, decidiu-se inserir l\u00f3gica condicional no c\u00f3digo cliente para lidar com cada tipo espec\u00edfico de sensor, como girosc\u00f3pio ou aceler\u00f4metro. No entanto, essa abordagem introduziria alto acoplamento, aumento da complexidade e dificultaria a escalabilidade do sistema com a adi\u00e7\u00e3o de novos sensores. Como j\u00e1 exemplificado em sala de aula \u2014 no caso dos v\u00e1rios caminhos poss\u00edveis entre um local e um destino \u2014 preencher o c\u00f3digo com estruturas if-else seria uma solu\u00e7\u00e3o \"n\u00e3o elegante\" e pouco sustent\u00e1vel.</p> <p>Para contornar essa limita\u00e7\u00e3o, optou-se pela aplica\u00e7\u00e3o do padr\u00e3o de projeto Adapter, por meio da cria\u00e7\u00e3o da interface ISensorAdapter. Essa interface define os m\u00e9todos esperados pelo sistema \u2014 como getDeltaGrau() e getDeltaTempo() \u2014 funcionando como um contrato \u00fanico para qualquer sensor utilizado no processo de an\u00e1lise.</p> <p>Cada tipo de sensor real (como o girosc\u00f3pio e o aceler\u00f4metro) \u00e9 encapsulado em sua respectiva classe adaptadora (GiroscopioAdapter, AcelerometroAdapter), que implementa a interface ISensorAdapter e traduz os dados e comportamentos do sensor original para o formato esperado pelo sistema.</p> <p>Com isso, o componente TargetMonitoramento passa a trabalhar diretamente com objetos do tipo ISensorAdapter, abstraindo-se dos detalhes de implementa\u00e7\u00e3o dos sensores concretos. Essa solu\u00e7\u00e3o garante maior flexibilidade, facilidade de manuten\u00e7\u00e3o e prepara o sistema para a integra\u00e7\u00e3o de novos sensores no futuro \u2014 bastando, para isso, implementar um novo adaptador compat\u00edvel com a interface definida.</p> <p></p> <p></p>  Autores: Altino Arthur, M\u00e1rcio Henrique e Daniel de Sousa  <p></p>"},{"location":"PadroesDeProjeto/3.2.GoFsEstruturais/#implementacao-em-codigo-adapter","title":"Implementa\u00e7\u00e3o em c\u00f3digo - Adapter","text":"<pre><code>\nimport java.time.LocalDateTime;\nimport java.time.LocalDate;\n\n\npublic interface ISensorAdapter {\n    float getDeltaGrau();\n    int getDeltaTempo();\n}\n\n// Adaptee Acelerometro\npublic class Acelerometro {\n    public float getAceleracaoX() {\n        return 1.5f;\n    }\n\n    public float getAceleracaoY() {\n        return 0.8f;\n    }\n\n    public String lerDadosBrutos() {\n        return \"dados acelerometro\";\n    }\n\n    public void calibrar() {\n        System.out.println(\"Acelerometro calibrado\");\n    }\n}\n\n// Adaptee Giroscopio\n\npublic class Giroscopio {\n    public float getAnguloX() {\n        return 10.5f;\n    }\n\n    public float getAnguloY() {\n        return 5.2f;\n    }\n\n    public String lerDadosBrutos() {\n        return \"dados giroscopio\";\n    }\n\n    public void calibrar() {\n        System.out.println(\"Giroscopio calibrado\");\n    }\n}\n\n\n// Classe cliente: Monitoramento\n\npublic class Monitoramento {\n    private Situacao situacao;\n    private int deltaVariacaoGraus;\n    private int tempoParadoSegundo;\n    private LocalDateTime dataHora;\n    private ISensorAdapter sensor;\n    private ResultadoAnalise resultado;\n\n    public Monitoramento(Situacao situacao, ISensorAdapter sensor) {\n        this.situacao = situacao;\n        this.sensor = sensor;\n        this.deltaVariacaoGraus = Math.round(sensor.getDeltaGrau());\n        this.tempoParadoSegundo = sensor.getDeltaTempo();\n        this.dataHora = LocalDateTime.now();\n        this.resultado = new ResultadoAnalise();\n    }\n\n    public String getResumo() {\n        return \"Situa\u00e7\u00e3o: \" + situacao +\n                \", Graus: \" + deltaVariacaoGraus +\n                \", Tempo parado: \" + tempoParadoSegundo + \"s\";\n    }\n\n    public ISensorAdapter getSensor() {\n        return sensor;\n    }\n\n    public ResultadoAnalise getResultado() {\n        return resultado;\n    }\n}\n\n</code></pre>"},{"location":"PadroesDeProjeto/3.2.GoFsEstruturais/#implementacoes-das-classes","title":"Implementa\u00e7\u00f5es das Classes","text":"<p>As implementa\u00e7\u00f5es completas das classes mencionadas neste documento podem ser conferidas no reposit\u00f3rio oficial do projeto, dispon\u00edvel em:</p> <p>https://github.com/UnBArqDsw2025-1-Turma01/2025.1-T01-_G1_Embarcado_Entrega_03/tree/main/src/monitora</p> <p>O diret\u00f3rio <code>src/monitora</code> cont\u00e9m o c\u00f3digo-fonte Java estruturado em pacotes.</p>"},{"location":"PadroesDeProjeto/3.2.GoFsEstruturais/#referencias","title":"Refer\u00eancias","text":"<p>Arquitetura e Desenho de Software - AULA - GOFS ESTRUTURAIS - Profa. Milene Serrano - Material em Slides. SERRANO, Milene. Acesso em: 30 de maio de 2025.</p>"},{"location":"PadroesDeProjeto/3.2.GoFsEstruturais/#historico-de-versoes","title":"Hist\u00f3rico de Vers\u00f5es","text":"Vers\u00e3o Commit da Vers\u00e3o Data Descri\u00e7\u00e3o Autor(es) Revisor(es) Descri\u00e7\u00e3o da Revis\u00e3o Commit da Revis\u00e3o 1.0 Ver Commit 01/06/2025 Adi\u00e7\u00e3o do diagrama composite Altino Arthur, M\u00e1rcio Henrique e Daniel de Sousa Revisor \u2014 \u2014 1.1 Ver Commit 02/06/2025 Adi\u00e7\u00e3o da Implementa\u00e7\u00e3o composite Altino Arthur, M\u00e1rcio Henrique e Daniel de Sousa Revisor \u2014 \u2014 1.2 Ver Commit 02/06/2025 Adi\u00e7\u00e3o da Implementa\u00e7\u00e3o Adapter Altino Arthur, M\u00e1rcio Henrique e Daniel de Sousa Revisor \u2014 \u2014"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/","title":"3.3. M\u00f3dulo Padr\u00f5es de Projeto GoFs Comportamentais","text":""},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Os padr\u00f5es comportamentais definidos pelos Gang of Four (GoF) tratam da forma como os objetos interagem e compartilham responsabilidades dentro de um sistema. Eles estabelecem modelos reutiliz\u00e1veis que organizam a comunica\u00e7\u00e3o entre objetos, promovendo solu\u00e7\u00f5es eficazes para desafios recorrentes relacionados ao comportamento das classes.</p> <p>Esses padr\u00f5es s\u00e3o fundamentais para o desenvolvimento de sistemas flex\u00edveis e bem estruturados. Ao adot\u00e1-los, os desenvolvedores conseguem dividir melhor as responsabilidades, tornar o c\u00f3digo mais modular, facilitar a manuten\u00e7\u00e3o e permitir a evolu\u00e7\u00e3o da aplica\u00e7\u00e3o com menor impacto estrutural. Al\u00e9m disso, esses padr\u00f5es incentivam a reutiliza\u00e7\u00e3o e melhoram a legibilidade e organiza\u00e7\u00e3o da arquitetura.</p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#strategy","title":"Strategy","text":"<p>O padr\u00e3o Strategy permite encapsular diferentes algoritmos dentro de classes espec\u00edficas e independentes, possibilitando que sejam alternados dinamicamente conforme a necessidade. Em vez de concentrar toda a l\u00f3gica em um \u00fanico m\u00e9todo com v\u00e1rias ramifica\u00e7\u00f5es (como <code>if</code> ou <code>switch</code>), o Strategy separa cada varia\u00e7\u00e3o do comportamento em uma classe distinta.</p> <p>Com isso, a aplica\u00e7\u00e3o pode selecionar e aplicar o algoritmo mais apropriado em tempo de execu\u00e7\u00e3o, promovendo maior clareza, flexibilidade e facilidade de extens\u00e3o. \u00c9 ideal para cen\u00e1rios em que h\u00e1 m\u00faltiplas formas de realizar uma tarefa, e deseja-se trocar entre essas abordagens sem alterar o c\u00f3digo principal.</p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#aplicacao-do-padrao-strategy","title":"Aplica\u00e7\u00e3o do Padr\u00e3o Strategy","text":"<p>Inicialmente, foi definida a interface <code>IEnvio</code>, que estabelece um contrato comum a todas as estrat\u00e9gias de envio. Essa interface declara o m\u00e9todo <code>enviar(Notificacao notificacao)</code>, o qual deve ser obrigatoriamente implementado por todas as classes concretas que representam formas espec\u00edficas de envio.</p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#estrategias-de-envio","title":"Estrat\u00e9gias de Envio","text":"<p>A seguir, foram desenvolvidas as classes respons\u00e1veis por implementar os diferentes canais de notifica\u00e7\u00e3o, cada uma encapsulando a l\u00f3gica de envio correspondente:</p> <ul> <li>EstrategiaSMS: realiza o envio de mensagens de texto via SMS.</li> <li>EstrategiaEmail: gerencia o envio de e-mails a partir dos dados da notifica\u00e7\u00e3o.</li> <li>EstrategiaPush: envia alertas do tipo push diretamente para dispositivos m\u00f3veis.</li> </ul> <p>Todas essas classes implementam a interface <code>IEnvio</code> e, assim, podem ser utilizadas de maneira intercambi\u00e1vel pelo sistema. Dessa forma, o padr\u00e3o Strategy permitiu n\u00e3o apenas reduzir o acoplamento entre componentes, mas tamb\u00e9m viabilizou a possibilidade de extens\u00e3o do sistema com novas formas de envio, sem necessidade de modificar as classes existentes.</p> <p></p> <p></p>  Autores: Altino Arthur, M\u00e1rcio Henrique e Daniel de Sousa"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#implementacao-em-codigo-strategy-notificacao","title":"Implementa\u00e7\u00e3o em c\u00f3digo - Strategy (Notifica\u00e7\u00e3o)","text":"<pre><code>public interface IEnvio {\n    void enviar(Notificacao n);\n}\n</code></pre> <pre><code>public class EstrategiaEmail implements IEnvio {\n    @Override\n    public void enviar(Notificacao n) {\n        System.out.println(\"[EstrategiaEmail] Enviando E-mail para \" + n.getDestinatario().getContato().getEmail() + \": \" + n.getBaseadaEmResultado().getResumo());\n    }\n}\n</code></pre> <pre><code>public class EstrategiaPush implements IEnvio {\n    @Override\n    public void enviar(Notificacao n) {\n        System.out.println(\"[EstrategiaPush] Enviando Notifica\u00e7\u00e3o Push para \" + n.getDestinatario().getNome() + \": \" + n.getBaseadaEmResultado().getResumo());\n    }\n}\n</code></pre> <pre><code>public class EstrategiaSMS implements IEnvio {\n    @Override\n    public void enviar(Notificacao n) {\n        System.out.println(\"[EstrategiaSMS] Enviando SMS para \" + n.getDestinatario().getContato().getTelefone() + \": \" + n.getBaseadaEmResultado().getResumo());\n    }\n}\n</code></pre>  Autores: Altino Arthur, M\u00e1rcio Henrique e Daniel de Sousa"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#testando-o-strategy-notificacao","title":"Testando o Strategy (Notifica\u00e7\u00e3o)","text":"<pre><code>public class SistemaMonitoramentoTest {\n\n    public static void main(String[] args) {\n        System.out.println(\"\\n--- Iniciando Testes do Padr\u00e3o Strategy para Notifica\u00e7\u00f5es ---\");\n\n        // Criar entidades necess\u00e1rias para simular o cen\u00e1rio de notifica\u00e7\u00e3o\n        Contato contatoCuidador = new Contato(\"cuidador.teste@example.com\", \"5511987654321\");\n        Endereco enderecoCuidador = new Endereco(\"Rua dos Testes\", \"10\", \"Cidade Teste\", \"TS\", \"00000-000\");\n        PessoaCuidador cuidadorTeste = new PessoaCuidador(\"Ana Cuidadora\", Genero.Feminino, \"111.222.333-44\", LocalDate.of(1985, 5, 10), contatoCuidador, enderecoCuidador);\n\n        ResultadoAnalise resultadoQueda = new ResultadoAnalise(0.8, true, Situacao.QuedaDetectada);\n        ResultadoAnalise resultadoNormal = new ResultadoAnalise(0.1, false, Situacao.TudoBem);\n\n        System.out.println(\"\\n--- Cen\u00e1rio 1: Notifica\u00e7\u00e3o via SMS ---\");\n        Notificacao notificacaoSMS = new Notificacao(Prioridade.Baixa, TipoAlerta.SMS, cuidadorTeste, resultadoNormal);\n        System.out.println(\"Status inicial da notifica\u00e7\u00e3o SMS: \" + notificacaoSMS.getEstado());\n        notificacaoSMS.enviar();\n        System.out.println(\"Status final da notifica\u00e7\u00e3o SMS: \" + notificacaoSMS.getEstado());\n        if (notificacaoSMS.getEstado() != StatusNotificacao.Enviado) {\n            System.err.println(\"ERRO: Status da notifica\u00e7\u00e3o SMS n\u00e3o \u00e9 ENVIADO.\");\n        }\n\n        System.out.println(\"\\n--- Cen\u00e1rio 2: Notifica\u00e7\u00e3o via Email ---\");\n        Notificacao notificacaoEmail = new Notificacao(Prioridade.Media, TipoAlerta.Email, cuidadorTeste, resultadoNormal);\n        System.out.println(\"Status inicial da notifica\u00e7\u00e3o Email: \" + notificacaoEmail.getEstado());\n        notificacaoEmail.enviar();\n        System.out.println(\"Status final da notifica\u00e7\u00e3o Email: \" + notificacaoEmail.getEstado());\n        if (notificacaoEmail.getEstado() != StatusNotificacao.Enviado) {\n            System.err.println(\"ERRO: Status da notifica\u00e7\u00e3o Email n\u00e3o \u00e9 ENVIADO.\");\n        }\n\n        System.out.println(\"\\n--- Cen\u00e1rio 3: Notifica\u00e7\u00e3o via Push ---\");\n        Notificacao notificacaoPush = new Notificacao(Prioridade.Alta, TipoAlerta.Push, cuidadorTeste, resultadoQueda);\n        System.out.println(\"Status inicial da notifica\u00e7\u00e3o Push: \" + notificacaoPush.getEstado());\n        notificacaoPush.enviar();\n        System.out.println(\"Status final da notifica\u00e7\u00e3o Push: \" + notificacaoPush.getEstado());\n        if (notificacaoPush.getEstado() != StatusNotificacao.Enviado) {\n            System.err.println(\"ERRO: Status da notifica\u00e7\u00e3o Push n\u00e3o \u00e9 ENVIADO.\");\n        }\n\n        System.out.println(\"\\n--- Cen\u00e1rio 4: Altera\u00e7\u00e3o manual do estado da notifica\u00e7\u00e3o ---\");\n        Notificacao notificacaoManual = new Notificacao(Prioridade.Baixa, TipoAlerta.SMS, cuidadorTeste, resultadoNormal);\n        System.out.println(\"Status antes da altera\u00e7\u00e3o manual: \" + notificacaoManual.getEstado());\n        notificacaoManual.alterarEstado(StatusNotificacao.Ignorado);\n        System.out.println(\"Status ap\u00f3s altera\u00e7\u00e3o manual para IGNORADO: \" + notificacaoManual.getEstado());\n        if (notificacaoManual.getEstado() != StatusNotificacao.Ignorado) {\n            System.err.println(\"ERRO: Status da notifica\u00e7\u00e3o manual n\u00e3o \u00e9 IGNORADO.\");\n        }\n\n        System.out.println(\"\\n--- Cen\u00e1rio 5: Tentativa de cria\u00e7\u00e3o com tipo de alerta nulo (comportamento esperado: exce\u00e7\u00e3o) ---\");\n        try {\n            new Notificacao(Prioridade.Baixa, null, cuidadorTeste, resultadoNormal);\n            System.err.println(\"ERRO: Nenhuma exce\u00e7\u00e3o lan\u00e7ada para TipoAlerta nulo.\");\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"Sucesso: Exce\u00e7\u00e3o capturada para TipoAlerta nulo: \" + e.getMessage());\n            if (!e.getMessage().contains(\"nulo\")) {\n                System.err.println(\"ERRO: Mensagem de exce\u00e7\u00e3o inesperada para TipoAlerta nulo.\");\n            }\n        }\n\n        System.out.println(\"\\n--- Todos os Testes de Notifica\u00e7\u00e3o Strategy Conclu\u00eddos ---\");\n    }\n}\n</code></pre>  Autores: Altino Arthur, M\u00e1rcio Henrique e Daniel de Sousa"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#resultados-dos-testes-strategy","title":"Resultados dos Testes Strategy","text":"Autores: Altino Arthur, M\u00e1rcio Henrique e Daniel de Sousa"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#observer-gerenciando-eventos-com-baixo-acoplamento","title":"Observer: Gerenciando Eventos com Baixo Acoplamento","text":"<p>No desenvolvimento do sistema de monitoramento, foi identificado o requisito de notificar automaticamente diversos componentes sempre que um evento relevante como a detec\u00e7\u00e3o de uma queda ocorresse. A abordagem tradicional, baseada em chamadas diretas entre m\u00f3dulos, tornaria o sistema fortemente acoplado e dif\u00edcil de escalar. Para resolver essa limita\u00e7\u00e3o, optou-se pela ado\u00e7\u00e3o do padr\u00e3o de projeto Observer, pertencente \u00e0 categoria dos padr\u00f5es comportamentais.</p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#aplicacao-do-padrao-observer","title":"Aplica\u00e7\u00e3o do Padr\u00e3o Observer","text":"<p>O padr\u00e3o Observer estabelece uma rela\u00e7\u00e3o de depend\u00eancia entre um objeto \"sujeito\" (observ\u00e1vel) e um conjunto de objetos \"observadores\", de modo que, sempre que o estado do sujeito muda, todos os observadores s\u00e3o automaticamente notificados.</p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#interface-de-observacao-listenerqueda","title":"Interface de Observa\u00e7\u00e3o (ListenerQueda)","text":"<p>Inicialmente, foi definida a interface <code>ListenerQueda</code>, que representa o contrato que qualquer classe interessada em receber notifica\u00e7\u00f5es de eventos de queda deve implementar. Essa interface declara o m\u00e9todo <code>onQuedaDetectada(Monitoramento m, ResultadoAnalise r)</code>, que \u00e9 invocado sempre que uma nova situa\u00e7\u00e3o cr\u00edtica \u00e9 identificada.</p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#observadores-concretos","title":"Observadores Concretos","text":"<p>A seguir, foram implementadas as classes que atuam como observadores do sistema:</p> <ul> <li>NotificadorCuidador: ao ser notificado sobre uma queda, \u00e9 respons\u00e1vel por compor e disparar uma notifica\u00e7\u00e3o ao cuidador respons\u00e1vel.</li> <li>RegistradorLog: registra os eventos de queda em um log centralizado. Essa classe foi projetada tamb\u00e9m como um Singleton, garantindo que apenas uma inst\u00e2ncia gerencie os registros de log.</li> </ul> <p>Ambas as classes implementam a interface <code>ListenerQueda</code> e s\u00e3o registradas no componente observ\u00e1vel.</p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#sujeito-observavel-servicomonitoramento","title":"Sujeito Observ\u00e1vel (ServicoMonitoramento)","text":"<p>A classe <code>ServicoMonitoramento</code> atua como o sujeito observ\u00e1vel. Ela mant\u00e9m uma lista de objetos <code>ListenerQueda</code> previamente registrados. Quando o m\u00e9todo <code>processarMonitoramento()</code> detecta uma queda, o servi\u00e7o invoca o m\u00e9todo <code>notificarObservadores()</code>, que por sua vez aciona todos os observadores registrados.</p> <p>Importante destacar que <code>ServicoMonitoramento</code> n\u00e3o precisa conhecer os detalhes de implementa\u00e7\u00e3o dos observadores \u2014 apenas emite o evento. Cada observador responde ao evento de forma independente, promovendo o princ\u00edpio do baixo acoplamento.</p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#vantagens-da-solucao","title":"Vantagens da Solu\u00e7\u00e3o","text":"<p>A ado\u00e7\u00e3o do padr\u00e3o Observer trouxe uma s\u00e9rie de benef\u00edcios arquiteturais ao sistema, destacando-se:</p> <ul> <li>Baixo acoplamento entre o m\u00f3dulo de detec\u00e7\u00e3o e os m\u00f3dulos que reagem ao evento;</li> <li>Alta extensibilidade, permitindo adicionar novos observadores sem modificar o c\u00f3digo existente;</li> <li>Facilidade de manuten\u00e7\u00e3o, j\u00e1 que novas funcionalidades podem ser integradas com m\u00ednimo impacto no sistema.</li> </ul> <p>Caso haja a necessidade futura de incorporar novos comportamentos em resposta a eventos de queda (como acionar um alarme local ou alimentar um painel estat\u00edstico), basta implementar uma nova classe que estenda <code>ListenerQueda</code> e registr\u00e1-la no <code>ServicoMonitoramento</code>. Nenhuma altera\u00e7\u00e3o ser\u00e1 necess\u00e1ria nas classes j\u00e1 existentes, garantindo uma evolu\u00e7\u00e3o sustent\u00e1vel do c\u00f3digo.</p> <p></p> <p></p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#implementacao-em-codigo-observadores","title":"Implementa\u00e7\u00e3o em c\u00f3digo - Observadores","text":"<pre><code>public interface ListenerQueda {\n    void onQuedaDetectada(Monitoramento m, ResultadoAnalise r);\n}\n\nclass NotificadorCuidador implements ListenerQueda {\n    @Override\n    public void onQuedaDetectada(Monitoramento m, ResultadoAnalise r) {\n        System.out.println(\"[NotificadorCuidador] Queda detectada! Preparando notifica\u00e7\u00e3o para \" + m.getCuidadorAssociado().getNome());\n    }\n}\n</code></pre> <pre><code>public class NotificadorCuidador implements ListenerQueda {\n    @Override\n    public void onQuedaDetectada(Monitoramento m, ResultadoAnalise r) {\n        System.out.println(\"[NotificadorCuidador] Queda detectada! Preparando notifica\u00e7\u00e3o para \" + m.getCuidadorAssociado().getNome());\n    }\n}\n</code></pre> <pre><code>public class RegistradorLog implements ListenerQueda {\n    private static RegistradorLog instance;\n\n    private RegistradorLog() {\n        // Construtor privado para implementar o Singleton\n        System.out.println(\"[RegistradorLog] Inst\u00e2ncia do RegistradorLog criada.\");\n    }\n\n    public static RegistradorLog getInstance() {\n        if (instance == null) {\n            instance = new RegistradorLog();\n        }\n        return instance;\n    }\n\n    @Override\n    public void onQuedaDetectada(Monitoramento m, ResultadoAnalise r) {\n        System.out.println(\"[RegistradorLog] Queda detectada e registrada no log. \" + m.getResumo() + \" - Risco: \" + r.getRiscoQueda());\n    }\n}\n</code></pre>  Autores: Altino Arthur, M\u00e1rcio Henrique e Daniel de Sousa"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#testando-os-observadores","title":"Testando os Observadores","text":"<pre><code>public class SistemaMonitoramentoTest {\n\n    public static void main(String[] args) {\n        System.out.println(\"--- Iniciando Testes do Padr\u00e3o Observer ---\");\n\n        // 1. Criar entidades necess\u00e1rias para simular o cen\u00e1rio de monitoramento e queda\n        Contato contatoCuidador = new Contato(\"joao.cuidador@example.com\", \"5511912345678\");\n        Endereco enderecoCuidador = new Endereco(\"Rua da Guarda\", \"789\", \"Cidade Segura\", \"SP\", \"12345-678\");\n        PessoaCuidador joao = new PessoaCuidador(\"Jo\u00e3o Guardi\u00e3o\", Genero.Masculino, \"012.345.678-90\", LocalDate.of(1970, 1, 1), contatoCuidador, enderecoCuidador);\n\n        Contato contatoMonitorado = new Contato(\"maria.monitorada@example.com\", \"5511987654321\");\n        Endereco enderecoMonitorado = new Endereco(\"Av. Paz\", \"1000\", \"Cidade Tranquila\", \"MG\", \"98765-432\");\n        PessoaMonitorada maria = new PessoaMonitorada(\"Maria Paciente\", Genero.Feminino, \"908.765.432-10\", LocalDate.of(1930, 12, 1), contatoMonitorado, enderecoMonitorado);\n\n        // Associar o cuidador \u00e0 pessoa monitorada\n        maria.adicionarCuidador(joao);\n        joao.adicionarPessoaMonitorada(maria);\n\n        // Criar um sensor associado \u00e0 pessoa monitorada\n        Sensor sensorSala = new Sensor(\"Aceler\u00f4metro\", \"Sala de Estar\", LocalDate.of(2025, 5, 20));\n        maria.adicionarSensor(sensorSala);\n\n        // Instanciar o Servi\u00e7o de Monitoramento (o Sujeito/Observable)\n        ServicoMonitoramento servicoMonitoramento = new ServicoMonitoramento();\n\n        // **Aten\u00e7\u00e3o**: Por padr\u00e3o, NotificadorCuidador e RegistradorLog j\u00e1 s\u00e3o adicionados\n        // como observadores no construtor de ServicoMonitoramento.\n        // Se voc\u00ea quisesse adicionar outros ou remover os padr\u00f5es, faria aqui:\n        // servicoMonitoramento.adicionarObservador(new MeuNovoObservador());\n        // servicoMonitoramento.removerObservador(RegistradorLog.getInstance());\n\n        System.out.println(\"\\n--- Cen\u00e1rio de Teste 1: Queda Detectada ---\");\n        System.out.println(\"Simulando um monitoramento com dados que indicam queda (delta: 60, tempo parado: 20)...\");\n\n        // Criar um monitoramento com dados cr\u00edticos\n        Monitoramento monitoramentoQueda = servicoMonitoramento.criarMonitoramento(joao, maria, sensorSala, 60, 20);\n\n        // Processar o monitoramento. Isso deve acionar a notifica\u00e7\u00e3o dos observadores.\n        servicoMonitoramento.processarMonitoramento(monitoramentoQueda);\n\n        System.out.println(\"\\n--- Verificando a Rea\u00e7\u00e3o dos Observadores ---\");\n        // Ap\u00f3s o processamento, as mensagens do NotificadorCuidador e do RegistradorLog\n        // devem ter sido impressas no console, indicando que foram notificados.\n        System.out.println(\"Verifique as mensagens acima para confirmar que 'NotificadorCuidador' e 'RegistradorLog' reagiram \u00e0 queda detectada.\");\n        // Voc\u00ea poderia adicionar asser\u00e7\u00f5es mais robustas aqui se estivesse usando JUnit,\n        // por exemplo, verificando logs de um Mock de RegistradorLog ou um Mock de NotificadorCuidador.\n\n        System.out.println(\"\\n--- Cen\u00e1rio de Teste 2: Situa\u00e7\u00e3o Normal (Sem Queda) ---\");\n        System.out.println(\"Simulando um monitoramento com dados normais (delta: 10, tempo parado: 2)...\");\n\n        // Criar um monitoramento com dados normais\n        Monitoramento monitoramentoNormal = servicoMonitoramento.criarMonitoramento(joao, maria, sensorSala, 10, 2);\n\n        // Processar o monitoramento. Isso N\u00c3O deve acionar a notifica\u00e7\u00e3o dos observadores.\n        servicoMonitoramento.processarMonitoramento(monitoramentoNormal);\n\n        System.out.println(\"\\n--- Verificando a N\u00e3o-Rea\u00e7\u00e3o dos Observadores ---\");\n        // Ap\u00f3s o processamento, as mensagens dos observadores N\u00c3O devem ter sido impressas,\n        // pois a situa\u00e7\u00e3o n\u00e3o \u00e9 cr\u00edtica.\n        System.out.println(\"Verifique as mensagens acima para confirmar que 'NotificadorCuidador' e 'RegistradorLog' N\u00c3O reagiram a esta situa\u00e7\u00e3o normal.\");\n\n        System.out.println(\"\\n--- Testes do Padr\u00e3o Observer Conclu\u00eddos ---\");\n    }\n}\n</code></pre>  Autores: Altino Arthur, M\u00e1rcio Henrique e Daniel de Sousa"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#resultados-dos-testes-observadores","title":"Resultados dos Testes Observadores","text":"<pre><code>PS E:\\monitora&gt;  e:; cd 'e:\\monitora'; &amp; 'C:\\Program Files\\Java\\jdk-24\\bin\\java.exe' '--enable-preview' '-XX:+ShowCodeDetailsInExceptionMessages' '-cp' 'C:\\Users\\altin\\AppData\\Roaming\\Code\\User\\workspaceStorage\\fa90a8a525ed41054182c6be96766ba1\\redhat.java\\jdt_ws\\monitora_9f3f1e81\\bin' 'SistemaMonitoramentoTest' \n--- Iniciando Testes do Padr\u00e3o Observer ---\n[PessoaMonitorada] Maria Paciente agora \u00e9 monitorada por Jo\u00e3o Guardi\u00e3o.\n[PessoaCuidador] Jo\u00e3o Guardi\u00e3o agora monitora Maria Paciente\n[Sensor] Sensor criado: Sensor ID: 767dee38-a9ae-4b4c-b4d5-b8e6e3c33b76, Tipo: Aceler\u00f4metro, Localiza\u00e7\u00e3o: Sala de Estar (Calibra\u00e7\u00e3o: 2025-05-20).\n[PessoaMonitorada] Maria Paciente associou o sensor Aceler\u00f4metro (767dee38-a9ae-4b4c-b4d5-b8e6e3c33b76).\n[SensorValidator] SensorValidator inicializado.\n[ServicoQueda] ServicoQueda inicializado.\n[AnalisadorPostura] AnalisadorPostura inicializado.\n[RegistradorLog] Inst\u00e2ncia do RegistradorLog criada.\n[ServicoMonitoramento] Observador RegistradorLog adicionado.\n[ServicoMonitoramento] ServicoMonitoramento inicializado.\n\n--- Cen\u00e1rio de Teste 1: Queda Detectada ---\nSimulando um monitoramento com dados que indicam queda (delta: 60, tempo parado: 20)...\n[Monitoramento] Novo monitoramento criado para Maria Paciente com sensor Aceler\u00f4metro.\n[PessoaMonitorada] Maria Paciente adicionou um novo registro de monitoramento.\n[ServicoMonitoramento] Monitoramento criado com sucesso.\n[ServicoMonitoramento] Processando monitoramento para Maria Paciente...\n[AnalisadorPostura] Normalizando \u00e2ngulo 90 para 90.\n[ServicoMonitoramento] DEBUG: AnalisadorPostura - normalizando 90 graus: 90\n[AnalisadorPostura] Normalizando \u00e2ngulo 180 para 180.\n[AnalisadorPostura] Normalizando \u00e2ngulo 0 para 0.\n[AnalisadorPostura] Calculando varia\u00e7\u00e3o de \u00e2ngulo: 0 -&gt; 180 = 180 graus.\n[ServicoMonitoramento] DEBUG: AnalisadorPostura - calculando variacao (0 a 180): 180\n[ServicoQueda] Analisando dados do monitoramento...\n[SensorValidator] Verificando calibra\u00e7\u00e3o do sensor 767dee38-a9ae-4b4c-b4d5-b8e6e3c33b76...\n[Sensor] Sensor 767dee38-a9ae-4b4c-b4d5-b8e6e3c33b76 est\u00e1 calibrado.\n[ServicoQueda] An\u00e1lise conclu\u00edda: Risco=90.0%, Situa\u00e7\u00e3o=QuedaDetectada, Notificar=true.\n[ResultadoAnalise] Resultado da an\u00e1lise gerado: Risco de queda: 90.0%, Situa\u00e7\u00e3o: QuedaDetectada, Notificar: true\n[Monitoramento] Resultado da an\u00e1lise aplicado ao monitoramento. Nova situa\u00e7\u00e3o: QuedaDetectada\n[ServicoMonitoramento] Situa\u00e7\u00e3o cr\u00edtica detectada: QuedaDetectada. Notificando observadores.\n[RegistradorLog] Queda detectada e registrada no log. Monitoramento em 2025-06-02T04:13:34.117433200 com sensor Aceler\u00f4metro. Situa\u00e7\u00e3o: QuedaDetectada - Risco: 0.9\n[ServicoMonitoramento] Criando notifica\u00e7\u00e3o para Jo\u00e3o Guardi\u00e3o (Prioridade: Alta, Tipo: Push).\n[Notificacao] Notifica\u00e7\u00e3o criada (Tipo: Push, Prioridade: Alta).\n[EstrategiaPush] Enviando Notifica\u00e7\u00e3o Push para Jo\u00e3o Guardi\u00e3o: Risco de queda: 90.0%, Situa\u00e7\u00e3o: QuedaDetectada, Notificar: true\n[Notificacao] Notifica\u00e7\u00e3o enviada para Jo\u00e3o Guardi\u00e3o. Estado: Enviado\n\n--- Verificando a Rea\u00e7\u00e3o dos Observadores ---\nVerifique as mensagens acima para confirmar que 'NotificadorCuidador' e 'RegistradorLog' reagiram \u00e0 queda detectada.\n\n--- Cen\u00e1rio de Teste 2: Situa\u00e7\u00e3o Normal (Sem Queda) ---\nSimulando um monitoramento com dados normais (delta: 10, tempo parado: 2)...\n[Monitoramento] Novo monitoramento criado para Maria Paciente com sensor Aceler\u00f4metro.\n[PessoaMonitorada] Maria Paciente adicionou um novo registro de monitoramento.\n[ServicoMonitoramento] Monitoramento criado com sucesso.\n[ServicoMonitoramento] Processando monitoramento para Maria Paciente...\n[AnalisadorPostura] Normalizando \u00e2ngulo 90 para 90.\n[ServicoMonitoramento] DEBUG: AnalisadorPostura - normalizando 90 graus: 90\n[AnalisadorPostura] Normalizando \u00e2ngulo 180 para 180.\n[AnalisadorPostura] Normalizando \u00e2ngulo 0 para 0.\n[AnalisadorPostura] Calculando varia\u00e7\u00e3o de \u00e2ngulo: 0 -&gt; 180 = 180 graus.\n[ServicoMonitoramento] DEBUG: AnalisadorPostura - calculando variacao (0 a 180): 180\n[ServicoQueda] Analisando dados do monitoramento...\n[SensorValidator] Verificando calibra\u00e7\u00e3o do sensor 767dee38-a9ae-4b4c-b4d5-b8e6e3c33b76...\n[Sensor] Sensor 767dee38-a9ae-4b4c-b4d5-b8e6e3c33b76 est\u00e1 calibrado.\n[ServicoQueda] An\u00e1lise conclu\u00edda: Risco=10.0%, Situa\u00e7\u00e3o=TudoBem, Notificar=false.\n[ResultadoAnalise] Resultado da an\u00e1lise gerado: Risco de queda: 10.0%, Situa\u00e7\u00e3o: TudoBem, Notificar: false\n[Monitoramento] Resultado da an\u00e1lise aplicado ao monitoramento. Nova situa\u00e7\u00e3o: TudoBem\n[ServicoMonitoramento] Situa\u00e7\u00e3o normal: TudoBem.\n\n--- Verificando a N\u00e3o-Rea\u00e7\u00e3o dos Observadores ---\nVerifique as mensagens acima para confirmar que 'NotificadorCuidador' e 'RegistradorLog' N\u00c3O reagiram a esta situa\u00e7\u00e3o normal.\n\n--- Testes do Padr\u00e3o Observer Conclu\u00eddos ---\nPS E:\\monitora&gt;     \n</code></pre>  Autores: Altino Arthur, M\u00e1rcio Henrique e Daniel de Sousa"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#implementacoes-das-classes","title":"Implementa\u00e7\u00f5es das Classes","text":"<p>As implementa\u00e7\u00f5es completas das classes mencionadas neste documento podem ser conferidas no reposit\u00f3rio oficial do projeto, dispon\u00edvel em:</p> <p>https://github.com/UnBArqDsw2025-1-Turma01/2025.1-T01-_G1_Embarcado_Entrega_03/tree/main/src/monitora</p> <p>O diret\u00f3rio <code>src/monitora</code> cont\u00e9m o c\u00f3digo-fonte Java estruturado em pacotes.</p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#referencias","title":"Refer\u00eancias","text":"<p>REFACTORING GURU. Padr\u00f5es de projeto comportamentais. Dispon\u00edvel em: https://refactoring.guru/pt-br/design-patterns/behavioral-patterns. Acesso em: 30 de maio de 2025.</p>"},{"location":"PadroesDeProjeto/3.3.GoFsComportamentais/#historico-de-versoes","title":"Hist\u00f3rico de Vers\u00f5es","text":"Vers\u00e3o Commit da Vers\u00e3o Data Descri\u00e7\u00e3o Autor(es) Revisor(es) Descri\u00e7\u00e3o da Revis\u00e3o Commit da Revis\u00e3o 1.0 Ver Commit 01/06/2025 Adi\u00e7\u00e3o do diagrama e representa\u00e7\u00e3o da implemeta\u00e7\u00e3o em c\u00f3digo java Altino Arthur, M\u00e1rcio Henrique e Daniel de Sousa Revisor \u2014 \u2014"},{"location":"PadroesDeProjeto/3.4.ParticipacoesPadroes/","title":"3.4. Participa\u00e7\u00f5es - Padr\u00f5es de Projeto","text":"<p>Breve relato sobre as participa\u00e7\u00f5es/contribui\u00e7\u00f5es de cada membro \u00e0 entrega.</p>"},{"location":"PadroesDeProjeto/3.4.ParticipacoesPadroes/#padrao-gof-criacional","title":"Padr\u00e3o GoF Criacional","text":"Nome do Membro Contribui\u00e7\u00e3o (Padr\u00f5es \u2013 FOCO_1) Signific\u00e2ncia da Contribui\u00e7\u00e3o para o Projeto (Excelente/Boa/Regular/Ruim/Nula) Comprobat\u00f3rios Claros (com link) M\u00e1rcio Henrique, Altino Arthur e Daniel Barros 1. Introdu\u00e7\u00e3o e cria\u00e7\u00e3o do padr\u00e3o criacional Factory Method. 2. Leitura de materiais bibliogr\u00e1ficos, como a FONTE_GOF. Boa Registro nos versionamentos do documento de GoF Criacional, conforme link. M\u00e1rcio Henrique, Altino Arthur e Daniel Barros 1. Cria\u00e7\u00e3o do padr\u00e3o criacional Singleton. Boa Registro nos versionamentos do documento de GoF Criacional, conforme link. M\u00e1rcio Henrique, Altino Arthur e Daniel Barros 1. Implementa\u00e7\u00e3o do padr\u00e3o criacional Singleton. Boa Registro nos versionamentos do documento de GoF Criacional, conforme link. M\u00e1rcio Henrique, Altino Arthur e Daniel Barros 1. Implementa\u00e7\u00e3o do padr\u00e3o criacional Factory Method. Boa Registro nos versionamentos do documento de GoF Criacional, conforme link."},{"location":"PadroesDeProjeto/3.4.ParticipacoesPadroes/#padrao-gof-estrutural","title":"Padr\u00e3o GoF Estrutural","text":"Nome do Membro Contribui\u00e7\u00e3o (Padr\u00f5es \u2013 FOCO_2) Signific\u00e2ncia da Contribui\u00e7\u00e3o para o Projeto Comprobat\u00f3rios Claros (com link) M\u00e1rcio Henrique, Altino Arthur e Daniel Barros 1. Introdu\u00e7\u00e3o e cria\u00e7\u00e3o do padr\u00e3o estrutural Composite. Boa Registro nos versionamentos do documento de GoF Estrutural, conforme link. M\u00e1rcio Henrique, Altino Arthur e Daniel Barros 2. Implementa\u00e7\u00e3o do padr\u00e3o estrutural Composite. Boa Registro nos versionamentos do documento de GoF Estrutural, conforme link. M\u00e1rcio Henrique, Altino Arthur e Daniel Barros 3. Introdu\u00e7\u00e3o e cria\u00e7\u00e3o do padr\u00e3o estrutural Adapter. Boa Registro nos versionamentos do documento de GoF Estrutural, conforme link. M\u00e1rcio Henrique, Altino Arthur e Daniel Barros 4. Implementa\u00e7\u00e3o do padr\u00e3o estrutural Adapter. Boa Registro nos versionamentos do documento de GoF Estrutural, conforme link."},{"location":"PadroesDeProjeto/3.4.ParticipacoesPadroes/#padrao-gof-comportamental","title":"Padr\u00e3o GoF Comportamental","text":"<p>|Nome do Membro | Contribui\u00e7\u00e3o (Padr\u00f5es \u2013 FOCO_3) | Signific\u00e2ncia da Contribui\u00e7\u00e3o para o Projeto (Excelente/Boa/Regular/Ruim/Nula) | Comprobat\u00f3rios Claros (com link)</p> <p>EXEMPLO: | Fulano | 1. Documenta\u00e7\u00e3o Geral do Padr\u00e3o Strategy na Wiki. | Regular | Registro nos Versionamentos do Documento de GoF Comportamental, conforme (link).</p> <p>TODOS DEVEM PARTICIPAR, MOSTRANDO SEUS PONTOS DE VISTA E COMO COLABORARAM NESSA ETAPA DA ENTREGA COM COMPROBAT\u00d3RIOS.</p>"},{"location":"PadroesDeProjeto/3.5.IniciativasExtras/","title":"3.5. Iniciativas Extras (Padr\u00f5es de Projeto)","text":"Autores: Altino Arthur, M\u00e1rcio Henrique e Daniel de Sousa"},{"location":"PadroesDeProjeto/3.5.IniciativasExtras/#entidades-principais-e-seus-papeis","title":"Entidades Principais e Seus Pap\u00e9is","text":"<p>O sistema \u00e9 centrado em algumas entidades principais:</p> <ul> <li>Pessoa: Uma classe abstrata que serve como base para PessoaCuidador e PessoaMonitorada, definindo atributos comuns como nome, g\u00eanero, CPF e data de nascimento. Cada pessoa tem um Contato e um Endere\u00e7o associados.</li> <li>Pessoa Monitorada: Representa o indiv\u00edduo que est\u00e1 sendo monitorado. Pode ter um hist\u00f3rico de Monitoramentos, e sua situa\u00e7\u00e3o atual pode ser verificada. Uma Pessoa Monitorada utiliza um ou mais Sensores.</li> <li>Pessoa Cuidador: O indiv\u00edduo respons\u00e1vel por monitorar uma ou mais Pessoas Monitoradas. Recebe Notifica\u00e7\u00f5es e pode confirmar seu recebimento.</li> <li>Sensor: Um dispositivo que coleta dados para o monitoramento, com atributos como ID, tipo e localiza\u00e7\u00e3o. \u00c9 crucial que esteja calibrado para leituras precisas.</li> <li>Monitoramento: Representa um registro de dados coletados por um Sensor em um determinado momento, incluindo a situa\u00e7\u00e3o detectada (ex: \"QuedaDetectada\", \"TudoBem\"), varia\u00e7\u00f5es de graus e tempo parado. Cada monitoramento est\u00e1 associado a um ResultadoAnalise.</li> <li>ResultadoAnalise: Cont\u00e9m o resultado da an\u00e1lise de um monitoramento, indicando o risco de queda, se deve notificar e a situa\u00e7\u00e3o final.</li> <li>Notificacao: Objeto que encapsula os detalhes de um alerta (prioridade, estado, tipo de alerta) a ser enviado a um PessoaCuidador, utilizando um padr\u00e3o Strategy para o m\u00e9todo de envio.</li> </ul>"},{"location":"PadroesDeProjeto/3.5.IniciativasExtras/#fluxo-de-comportamento","title":"Fluxo de Comportamento","text":"<p>O comportamento do sistema pode ser compreendido atrav\u00e9s dos seguintes fluxos:</p>"},{"location":"PadroesDeProjeto/3.5.IniciativasExtras/#criacao-e-processamento-de-monitoramento","title":"Cria\u00e7\u00e3o e Processamento de Monitoramento","text":"<ul> <li>O ServicoMonitoramento \u00e9 o ponto central. Ele pode criarMonitoramento a partir de um cuidador, uma pessoa monitorada e um sensor.</li> <li>O m\u00e9todo processarMonitoramento \u00e9 invocado para analisar os dados. Ele utiliza o ServicoQueda e o AnalisadorPostura para determinar se uma queda ocorreu.</li> <li>O ServicoQueda utiliza o SensorValidator para garantir que o sensor est\u00e1 calibrado antes de analisar os dados e gerar um ResultadoAnalise.</li> <li>O AnalisadorPostura calcula varia\u00e7\u00f5es de \u00e2ngulo e tempo parado a partir dos dados do sensor.</li> </ul>"},{"location":"PadroesDeProjeto/3.5.IniciativasExtras/#deteccao-de-queda-e-notificacao-padrao-observer","title":"Detec\u00e7\u00e3o de Queda e Notifica\u00e7\u00e3o (Padr\u00e3o Observer)","text":"<ul> <li>Quando o ServicoMonitoramento processa um Monitoramento e o ResultadoAnalise indica uma situa\u00e7\u00e3o cr\u00edtica (ex: \"QuedaDetectada\"), ele atua como um \"Subject\" ou \"Publisher\" no padr\u00e3o Observer.</li> <li>Ele notificaObservadores (implementa\u00e7\u00f5es da interface Notificador).</li> <li>A Notifica\u00e7\u00e3o (um observador) \u00e9 acionado e, por sua vez, criando uma notifica\u00e7\u00e3o baseada no ResultadoAnalise para o PessoaCuidador associado.</li> <li>Comcomitante tem uma fun\u00e7\u00e3o respons\u00e1vel por registrar o log da notifica\u00e7\u00e3o.</li> </ul>"},{"location":"PadroesDeProjeto/3.5.IniciativasExtras/#envio-de-notificacoes-padrao-strategy","title":"Envio de Notifica\u00e7\u00f5es (Padr\u00e3o Strategy)","text":"<ul> <li>A Notificacao \u00e9 configurada com uma estrat\u00e9gia de envio (ex: SMS, Email, Push) definida pelo atributo tipoAlerta.</li> <li>Quando o m\u00e9todo enviar() da Notificacao \u00e9 chamado, ela delega a tarefa \u00e0 sua estrategia de envio (implementa\u00e7\u00e3o de IEnvio).</li> <li>As classes EstrategiaSMS, EstrategiaEmail, e EstrategiaPush implementam a l\u00f3gica espec\u00edfica para enviar notifica\u00e7\u00f5es via seus respectivos canais.</li> <li>O PessoaCuidador tem um m\u00e9todo receberNotificacao e confirmarRecebimento.</li> </ul>"},{"location":"PadroesDeProjeto/3.5.IniciativasExtras/#relacoes-e-dependencias-chave","title":"Rela\u00e7\u00f5es e Depend\u00eancias Chave","text":"<ul> <li>Associa\u00e7\u00f5es: Pessoas (Cuidador e Monitorada) se associam a Contato e Endere\u00e7o. Uma Pessoa Monitorada possui hist\u00f3rico de Monitoramentos e \u00e9 monitorada por um ou mais Pessoas Cuidadoras. Pessoas Monitoradas utilizam Sensores.</li> <li>Depend\u00eancias: O ServicoMonitoramento depende de ServicoQueda, AnalisadorPostura, Notificacao, Monitoramento, PessoaCuidador e PessoaMonitorada. O ServicoQueda depende do SensorValidator e gera ResultadoAnalise.</li> <li>Heran\u00e7a: PessoaCuidador e PessoaMonitorada herdam de Pessoa. As estrat\u00e9gias de envio (EstrategiaSMS, EstrategiaEmail, EstrategiaPush) implementam a interface IEnvio. Os ouvintes de queda (NotificadorCuidador, RegistradorLog) implementam a interface ListenerQueda.</li> </ul>"},{"location":"PadroesDeProjeto/3.5.IniciativasExtras/#historico-de-versoes","title":"Hist\u00f3rico de Vers\u00f5es","text":"Vers\u00e3o Commit da Vers\u00e3o Data Descri\u00e7\u00e3o Autor(es) Revisor(es) Descri\u00e7\u00e3o da Revis\u00e3o Commit da Revis\u00e3o 1.0 Ver Commit 29/05/2025 Corre\u00e7\u00f5es gerais ao diagrama de classes Altino Arthur, M\u00e1rcio Henrique e Daniel de Sousa Revisor \u2014 \u2014"},{"location":"PadroesDeProjeto/3.PadroesDeProjeto/","title":"3. Desenho de Software (Padr\u00f5es de Projeto)","text":"<p>A Wiki ou GitPages do Projeto deve conter um t\u00f3pico dedicado ao M\u00f3dulo Desenho de Software (Padr\u00f5es de Projeto), com tr\u00eas subt\u00f3picos principais, conforme: 3.1, 3.2 e 3.3. Adicionalmente, deve constar um subt\u00f3pico sobre as participa\u00e7\u00f5es, conforme 3.4. Por fim, pode constar um subt\u00f3pico, chamado 3.5, no qual podem ser colocadas quaisquer iniciativas extras, caso ocorram (opcional). Para cada foco, revelar principalmente: Rastreabilidade &amp; Elos com Outros Artefatos, Senso Cr\u00edtico, Refer\u00eancias, Versionamentos &amp; Participa\u00e7\u00f5es e Metodologia.</p>"},{"location":"Projeto/Projeto/","title":"Projeto","text":"<p>** Projetos - Per\u00edodo   2025.1</p> <p>Segue a lista de projetos desse per\u00edodo letivo:</p> <pre><code>\u2022 G1 at\u00e9 10 membros\n\u2022 Projeto G1 - Embarcado, baseado em uma Biblioteca de Integra\u00e7\u00e3o ou alguma automa\u00e7\u00e3o, no contexto, por exemplo, do Ardu\u00edno.\n\u2022 N\u00e3o usar o nome de uma biblioteca real. A ideia \u00e9 usar o nome G1_Embarcado mesmo, e apenas se basear em uma comunidade especializada para fins de identificar um problema no contexto de embarcados, o p\u00fablico-alvo, principais funcionalidades, dentre outros detalhes. N\u00e3o pegar algo pronto. Pensar em uma proposta nova.\n\n\u2022 G2 at\u00e9 10 membros\n\u2022 Projeto G2 - PinacotecaOnline, baseado em sites de Pinacotecas Virtuais, podendo ser em vers\u00e3o site, desktop ou aplicativo m\u00f3vel.\n\u2022 N\u00e3o usar o nome de uma pinacoteca real. A ideia \u00e9 usar o nome G2_PinacotecaOnline mesmo, e apenas se basear em algo conhecido para fins de identificar p\u00fablico-alvo, principais funcionalidades, dentre outros detalhes.\n\n\u2022 G3 at\u00e9 10 membros\n\u2022 Projeto G3 - EuMeAmo, baseado em sites e/ou materiais informativos sobre cuidados gerais com postura, exerc\u00edcios f\u00edsicos regulares, e outros. Pode ser em vers\u00e3o site, desktop ou aplicativo m\u00f3vel.\n\u2022 N\u00e3o usar o nome do site real. A ideia \u00e9 usar o nome G3_EuMeAmo mesmo, e apenas se basear em algo conhecido para fins de identificar p\u00fablico-alvo, principais funcionalidades, dentre outros detalhes.\n\n\u2022 G4 at\u00e9 10 membros\n\u2022 Projeto G4 - QuemFazNiver_GostaDe, baseado em qualquer inspira\u00e7\u00e3o envolvendo anivers\u00e1rios, podendo ser em vers\u00e3o site, desktop ou aplicativo m\u00f3vel. Aqui, a dica \u00e9 conferir, al\u00e9m de uma simples agenda de anivers\u00e1rios, tamb\u00e9m sugest\u00f5es de presentes, temas de festa, dentre outros itens personalizados para quem faz anivers\u00e1rio.\n\u2022 N\u00e3o usar o nome do site real. A ideia \u00e9 usar o nome G4_QuemFazNiver_GostaDe mesmo, e apenas se basear em algo conhecido para fins de identificar p\u00fablico-alvo, principais funcionalidades, dentre outros detalhes.\n\n\u2022 G5 at\u00e9 10 membros\n\u2022 Projeto G5 - MundoMusical, sendo um Jogo para Aprendizado sobre Teoria e Pr\u00e1tica Musical, baseado sites e materiais did\u00e1ticos sobre m\u00fasica, podendo ser em vers\u00e3o site, desktop ou aplicativo m\u00f3vel. \n\u2022 N\u00e3o usar o nome de algo real. A ideia \u00e9 usar o nome G5_MundoMusical mesmo, e apenas se basear em algo conhecido para fins de identificar p\u00fablico-alvo, principais funcionalidades, dentre outros detalhes.\n\n\u2022 G6 at\u00e9 10 membros\n\u2022 Projeto G6 - FCTEDesapega, baseado em sites de an\u00fancio de algo que n\u00e3o interessa mais para algu\u00e9m, mas pode ser valoroso para outros, podendo ser em vers\u00e3o site, desktop ou aplicativo m\u00f3vel. Aqui, espera-se um software mirado na comunidade FCTE, com possibilidade de an\u00fancios de algo que n\u00e3o mais \u00e9 desejado, suas caracter\u00edsticas, valor ou doa\u00e7\u00e3o ou troca, dentre outros.\n\u2022 N\u00e3o usar o nome de algo real. A ideia \u00e9 usar o nome G6_FCTEDesapega mesmo, e apenas se basear em algo conhecido para fins de identificar p\u00fablico-alvo, principais funcionalidades, dentre outros detalhes.\n\n\u2022 G7 at\u00e9 10 membros\n\u2022 Projeto G7 - FCTEPodcast, baseado em um software contendo podcasts, podendo ser em vers\u00e3o site, desktop ou aplicativo m\u00f3vel. Aqui, espera-se um software mirado na comunidade FCTE, com possibilidade de postagens de podcasts educacionais, explicando t\u00f3picos de diferentes mat\u00e9rias por parte dos docentes, monitores, discentes e convidados da comunidade.\n\u2022 N\u00e3o usar o nome de algo real. A ideia \u00e9 usar o nome G7_FCTEPodcast mesmo, e apenas se basear em algo conhecido para fins de identificar p\u00fablico-alvo, principais funcionalidades, dentre outros detalhes.\n</code></pre> <p>OBS: Caso existam novos matriculados na disciplina, acima de 70 alunos, novos projetos ser\u00e3o propostos pela professora. Portanto, nesses casos, conversar com a professora na \u00e9poca.</p>"}]}